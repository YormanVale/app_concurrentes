#include <stdio.h>
#include <omp.h>
#include <opencv2/opencv.hpp>

// Función para imprimir un kernel
void printKernel(const char *name, const float *kernel, int size)
{
    printf("Kernel: %s\n", name);
    for (int i = 0; i < size; ++i)
    {
        for (int j = 0; j < size; ++j)
        {
            printf("%f ", kernel[i * size + j]);
        }
        printf("\n");
    }
    printf("\n");
}

void printStats(const char *name, const cv::Mat &image)
{
    double minVal, maxVal;
    cv::minMaxLoc(image, &minVal, &maxVal);
    cv::Scalar meanVal = cv::mean(image);
    cv::Scalar stdDev;
    cv::meanStdDev(image, meanVal, stdDev);

    printf("Estadísticas de %s - Min: %f, Max: %f, Mean: %f, StdDev: %f\n", name, minVal, maxVal, meanVal[0], stdDev[0]);
}

int main()
{

    // Establecer el número de hilos a 4
    omp_set_num_threads(4);

    // Cargar la imagen en escala de grises
    cv::Mat image = cv::imread("imagen.jpg", cv::IMREAD_GRAYSCALE);
    if (image.empty())
    {
        printf("Error al cargar la imagen.\n");
        return -1;
    }

    // Definir los kernels
    float kernel_class_1[3][3] = {
        {0, -1, 0},
        {-1, 4, -1},
        {0, -1, 0}};

    float kernel_class_2[3][3] = {
        {1, 2, 1},
        {0, 0, 0},
        {-1, -2, -1}};

    float kernel_class_3[3][3] = {
        {1, 0, -1},
        {2, 0, -2},
        {1, 0, -1}};
    float kernel_square_3x3[3][3] = {
        {1, 1, 1},
        {1, 1, 1},
        {1, 1, 1}};

    float kernel_edge_3x3[3][3] = {
        {1, 0, -1},
        {0, 0, 0},
        {-1, 0, 1}};

    float kernel_square_5x5[5][5] = {
        {1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1}};

    float kernel_edge_5x5[5][5] = {
        {2, 1, 0, -1, -2},
        {1, 1, 0, -1, -1},
        {0, 0, 0, 0, 0},
        {-1, -1, 0, 1, 1},
        {-2, -1, 0, 1, 2}};

    float kernel_sobel_horizontal[3][3] = {
        {1, 2, 1},
        {0, 0, 0},
        {-1, -2, -1}};

    float kernel_sobel_vertical[3][3] = {
        {-1, 0, 1},
        {-2, 0, 2},
        {-1, 0, 1}};

    cv::Mat result;
    cv::filter2D(image, result, image.depth(), cv::Mat(3, 3, CV_32F, kernel_class_1));
    printStats("kernel_class_1", result);
    cv::imwrite("filtered_kernel_class_1.jpg", result);

    cv::filter2D(image, result, image.depth(), cv::Mat(3, 3, CV_32F, kernel_class_2));
    printStats("kernel_class_2", result);
    cv::imwrite("filtered_kernel_class_2.jpg", result);

    cv::filter2D(image, result, image.depth(), cv::Mat(3, 3, CV_32F, kernel_class_3));
    printStats("kernel_class_3", result);
    cv::imwrite("filtered_kernel_class_3.jpg", result);

    cv::filter2D(image, result, image.depth(), cv::Mat(3, 3, CV_32F, kernel_square_3x3));
    printStats("kernel_square_3x3", result);
    cv::imwrite("filtered_kernel_square_3x3.jpg", result);

    cv::filter2D(image, result, image.depth(), cv::Mat(3, 3, CV_32F, kernel_edge_3x3));
    printStats("kernel_edge_3x3", result);
    cv::imwrite("filtered_kernel_edge_3x3.jpg", result);

    cv::filter2D(image, result, image.depth(), cv::Mat(5, 5, CV_32F, kernel_square_5x5));
    printStats("kernel_square_5x5", result);
    cv::imwrite("filtered_kernel_square_5x5.jpg", result);

    cv::filter2D(image, result, image.depth(), cv::Mat(5, 5, CV_32F, kernel_edge_5x5));
    printStats("kernel_edge_5x5", result);
    cv::imwrite("filtered_kernel_edge_5x5.jpg", result);

    cv::filter2D(image, result, image.depth(), cv::Mat(3, 3, CV_32F, kernel_sobel_horizontal));
    printStats("kernel_sobel_horizontal", result);
    cv::imwrite("filtered_kernel_sobel_horizontal.jpg", result);

    cv::filter2D(image, result, image.depth(), cv::Mat(3, 3, CV_32F, kernel_sobel_vertical));
    printStats("kernel_sobel_vertical", result);
    cv::imwrite("filtered_kernel_sobel_vertical.jpg", result);

    return 0;
}
